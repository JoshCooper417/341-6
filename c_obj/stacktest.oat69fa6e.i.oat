# 1 "./tests/stacktest.oat"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "./tests/stacktest.oat"

# 1 "lib/stack.oat" 1








class Node <: Object {
  int item;
  Node? next;

  new(int val)() {
    this.item = val;
    this.next = null;
  }

  unit setnext(Node? t) {
    this.next = t;
    return;
  }

  int getitem() {
    return this.item;
  }
};

class Stack <: Object {
  Node? top;

  new()(){
    this.top = null;
  }

  unit push(int n) {
    Node ntop = new Node(n);
    ntop.setnext(this.top);
    this.top = ntop;
    return;
  }

  int pop() {
    int r=-1;
    if?(Node tch = this.top) {
      int ret = tch.getitem();
      this.top = tch.next;
      r = ret;
    } else {
      print_string("Empty Stack! Returned -1\n");
    }
    return r;
  }
};

# 2 "./tests/stacktest.oat" 2

Stack s = new Stack();

int program(int argc, string[] argv) {
  int r=0;
  s.push(7);
  s.push(3);
  s.push(9);
  r = r+s.pop();
  s.push(3);
  s.push(17);
  s.push(2);
  r = r+s.pop();
  s.push(1);
  s.push(98);
  r = r+s.pop();
  s.push(43);
  s.push(11);
  r = r+s.pop();
  return r;
}


