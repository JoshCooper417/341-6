# 1 "./tests/listtest.oat"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "./tests/listtest.oat"

# 1 "lib/list.oat" 1





bool equals(Object? o1, Object? o2) {
  return o1 == o2;
}

class ListItem <: Object {
  Object? obj;
  ListItem? prev;
  ListItem? next;

  new (Object? o)() {
    this.obj = o;
    this.prev = null;
    this.next = null;
  }
};

class List <: Object {
  ListItem? head;

  new ()() {
    this.head = null;
  }

  bool is_empty() {
    return equals(this.head, null);
  }

  
  unit insert(Object o) {
    ListItem new_item = new ListItem(o);
    new_item.next = this.head;
    if? (ListItem old_head = this.head)
      old_head.prev = new_item;
    this.head = new_item;
    return;
  }

  
  unit remove(ListItem item) {
    if (equals(item, this.head)) {
      
      this.head = item.next;
      if? (ListItem next = item.next) 
        next.prev = null;
    } else {
      
      if? (ListItem prev = item.prev) {
        prev.next = item.next;
        if? (ListItem next = item.next)
           next.prev = prev;
      } else fail ( "invalid list" );
    }
    return;    
  }

};





# 2 "./tests/listtest.oat" 2

class Foo <: Object {
  int x;
  new (int x)() {
   this.x = x;
  }
  unit print() {
    print_string(string_of_int(this.x));
    return;
  }
};

unit printFooList(List l) {
  ListItem? cursor = l.head;
  while (!equals(cursor, null)) {
    if? (ListItem item = cursor) {
      if? (Object o = item.obj) {
        cast (Foo f = o) f.print(); else print_string("failed cast");
      } else print_string("failed null");
      cursor = item.next;
    }
  }
  return;
}

List l = new List();

int program (int argc, string[] argv) {
  ListItem? cursor = null;

  for (int i = 0; i< 10; i = i+ 1;) {
    l.insert(new Foo(i));
  }
  printFooList(l);
  cursor = l.head;
  if? (ListItem item = cursor) {
    if? (ListItem next =  item.next)
      l.remove(next);
  }
  printFooList(l);

  return 0;
}
